use starterm_workflows_types::*;
pub fn workflow() -> Workflow {
    Workflow {name: r####"Upload NativeScript project to iTunes Connect."####.into(),command: r####"ns appstore upload {{apple_id}} {{password}} {{mobile_provisioning_profile_identifier}} {{code_sign_identity}}"####.into(),tags: vec![r####"nativescript"####.into()].into_iter().collect(),description: Some(r####"Uploads your NativeScript project to iTunes Connect. The command either issues a production build and uploads it to iTunes Connect, or uses an already built package to upload."####.into()),arguments: vec![Argument {name: r####"apple_id"####.into(),description: Some(r####"iTunes connect id."####.into()),default_value: None,},Argument {name: r####"password"####.into(),description: Some(r####"Itunes connect password."####.into()),default_value: None,},Argument {name: r####"mobile_provisioning_profile_identifier"####.into(),description: Some(r####"The identifier of the mobile provision (E.g.. d5d40f61-b303-4fc8-aea3-fbb229a8171c) which will be used for building. This can easily be acquired through the iPhone Configuration Utility."####.into()),default_value: None,},Argument {name: r####"code_sign_identity"####.into(),description: Some(r####"The code sign identity which will be used for building. You can set it to something generic like 'iPhone Distribution' to let the build automatically detect a code sign identity."####.into()),default_value: None,}].into_iter().collect(),source_url: Some(r####"https://github.com/NativeScript/nativescript-cli/blob/master/docs/man_pages/publishing/appstore-upload.md"####.into()),author: Some(r####"erodriguezh"####.into()),author_url: Some(r####"https://github.com/erodriguezh"####.into()),shells: vec![].into_iter().collect(),}
}
