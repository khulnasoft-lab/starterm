use starterm_workflows_types::*;
pub fn workflow() -> Workflow {
    Workflow {name: r####"Convert certificate from PEM to PKCS#12"####.into(),command: r####"openssl pkcs12 -export -out {{out_pkcs12_cert}} -in {{in_pem_cert}} -inkey {{in_pem_private_key}} -certfile {{in_pem_cacert}}"####.into(),tags: vec![r####"ssl"####.into(),r####"openssl"####.into()].into_iter().collect(),description: Some(r####"Convert certificate in PKCS#12 container format (private key included) to PEM format (base64)"####.into()),arguments: vec![Argument {name: r####"in_pem_cert"####.into(),description: Some(r####"Input certificate file in PEM format. Files usually have .pem, .crt, or .cer extensions."####.into()),default_value: Some(r####"in_cert.pem"####.into()),},Argument {name: r####"in_pem_private_key"####.into(),description: Some(r####"Input private key file (in PEM format) which fits in_pem_cert. Files usually have .key extension."####.into()),default_value: Some(r####"in_private.key"####.into()),},Argument {name: r####"in_pem_cacert"####.into(),description: Some(r####"Input certificate file (or file bundle) of Certification Authority (in PEM format) which signed in_pem_cert file. Files usually have .pem, .crt, or .cer extensions."####.into()),default_value: Some(r####"cacert.pem"####.into()),},Argument {name: r####"out_pkcs12_cert"####.into(),description: Some(r####"Output file which will be in PKCS#12 container format with private key. Files usually have .pfx or .p12 extensions."####.into()),default_value: Some(r####"out_cert.pfx"####.into()),}].into_iter().collect(),source_url: None,author: Some(r####"Petr Stepan (Deworn)"####.into()),author_url: Some(r####"https://github.com/deworn"####.into()),shells: vec![].into_iter().collect(),}
}
